name: Run a specific test

on:
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Test pattern to run'
        required: true
        default: 'should invoke dumbResolverHandler with HYUI8 Angular dependencies'
        type: string
      max_attempts:
        description: 'Maximum attempts for dependency resolution'
        required: false
        default: '200'
        type: string
      openai_model:
        description: 'OpenAI model to use (GPT-4.1, GPT-4o, GPT-5-mini and grok-code are 0x models, haiku 0.33x model)'
        required: false
        default: 'copilot-gpt-4'
        type: choice
        options:
          - 'copilot-gpt-4.1'
          - 'copilot-gpt-5-mini'
          - 'copilot-gpt-5'
          - 'copilot-gpt-3.5-turbo'
          - 'copilot-gpt-4o-mini'
          - 'copilot-gpt-4'
          - 'copilot-gpt-4-turbo'
          - 'copilot-gpt-4o'
          - 'copilot-o3-mini'
          - 'copilot-grok-code'
          - 'copilot-gpt-5-codex'
          - 'copilot-claude-3.5-sonnet'
          - 'copilot-claude-sonnet-4'
          - 'copilot-claude-sonnet-4.5'
          - 'copilot-claude-haiku-4.5'
          - 'copilot-gemini-2.5-pro'
          - 'copilot-gpt-5-auto'

jobs:
  TestCase:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
 
    - name: Install dependencies
      run: npm i --verbose

    - name: Build project
      run: npm run build

    - name: Run test
      if: success()
      continue-on-error: true
      id: test_run
      run: npx mocha -- --grep "${{ github.event.inputs.test_pattern }}"
      timeout-minutes: 180
      env:
        MAX_ATTEMPTS: ${{ github.event.inputs.max_attempts }}
        OPENAI_MODEL: ${{ github.event.inputs.openai_model }}
    
    - name: Check test outcome
      if: always()
      run: |
        if ("${{ steps.test_run.outcome }}" -eq "cancelled") {
          Write-Host "⚠️ Test was cancelled - artifacts may be incomplete"
          exit 0
        } elseif ("${{ steps.test_run.outcome }}" -eq "failure") {
          Write-Host "❌ Test failed - check artifacts for details"
          exit 0
        } else {
          Write-Host "✅ Test completed successfully"
        }

    - name: Display test results
      if: always()
      run: echo "Test execution completed with pattern - ${{ github.event.inputs.test_pattern }}"

    - name: Prepare artifact name
      if: always()
      id: artifact_name
      run: |
        node -e "
        const testPattern = process.argv[1];
        const runNumber = process.argv[2];
        const cleanName = testPattern.replace(/\s/g, '_');
        const artifactName = cleanName + '__logs-' + runNumber;
        require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'name=' + artifactName + '\n');
        console.log('Generated artifact name:', artifactName);
        " '${{ github.event.inputs.test_pattern }}' '${{ github.run_number }}'

    - name: Debug - List files before upload
      if: always()
      run: |
        Write-Host "=== Listing files in current directory ==="
        Get-ChildItem -Force | Format-Table Name, Length, LastWriteTime
        Write-Host "`n=== Checking for package-cache.db ==="
        if (Test-Path "package-cache.db") {
          Write-Host "✅ package-cache.db found"
          Get-Item "package-cache.db" | Format-List
        } else {
          Write-Host "❌ package-cache.db NOT found in root"
        }
        Write-Host "`n=== Checking for cache in src/utils ==="
        if (Test-Path "src/utils/package-cache.db") {
          Write-Host "✅ Found in src/utils/"
          Get-Item "src/utils/package-cache.db" | Format-List
        }
        Write-Host "`n=== Searching for *.db files ==="
        Get-ChildItem -Recurse -Filter "*.db" -Force -ErrorAction SilentlyContinue | Format-Table FullName, Length
        Write-Host "`n=== Checking for git-git directory ==="
        if (Test-Path "test/assets/git-git") {
          Write-Host "✅ test/assets/git-git found"
          Get-ChildItem "test/assets/git-git" -Force -Recurse | Measure-Object | Select-Object -ExpandProperty Count | ForEach-Object { Write-Host "Total files: $_" }
        } else {
          Write-Host "❌ test/assets/git-git NOT found"
        }
        Write-Host "`n=== Listing test/assets contents ==="
        if (Test-Path "test/assets") {
          Get-ChildItem "test/assets" -Force | Format-Table Name, Length, LastWriteTime
        }

    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact_name.outputs.name }}
        path: |
          logs/
          src/logs/
          src/utils/logs/
          test/assets/git-git/**/*
          test/assets/git-git/.git/**/*
          test/assets/**/*.json
          test/assets/**/*.lock
          package-cache.db
          src/utils/package-cache.db
          **/*.db
        retention-days: 30
        if-no-files-found: warn
        include-hidden-files: true